datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model User {
  id            String    @id @default(cuid())
  slug          String    @unique
  name          String
  password      String
  email         String    @unique
  emailVerified DateTime?
  location      String?
  description   String?
  company       String?
  position      String?
  website       String?

  image     String   @default("/images/default-avatar.jpg")
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())
  role      Role     @default(USER)

  eventAttendee EventAttendee[]

  @@map("user")
}

enum EventPermissionRole {
  FOUNDER
  ORGANIZER
  ATTENDEE
}

enum EventType {
  VIRTUAL
  IN_PERSON
  HYBRID
}

enum TimeFormat {
  TWELVE_HOURS
  TWENTYFOUR_HOURS
}

enum EventCategory {
  EVENT
  ACADEMIC
  BUSINESS
  CONFERENCE
  CONVENTION
  FESTIVAL
  OTHER
}

enum EventLevel {
  TRIAL
  PRO
}

enum PrivacyLevel {
  PUBLIC
  PRIVATE
  UNLISTED
}

model Event {
  id           String        @id @default(cuid())
  slug         String        @unique
  name         String
  location     String?
  address      String?
  level        EventLevel    @default(TRIAL)
  timeFormat   TimeFormat    @default(TWELVE_HOURS)
  startDate    DateTime
  endDate      DateTime
  type         EventType     @default(HYBRID)
  category     EventCategory @default(EVENT)
  privacy      PrivacyLevel  @default(PRIVATE)
  image        String        @default("/images/default-event.jpg")
  banner       String?
  description  String?
  updatedAt    DateTime      @updatedAt
  createdAt    DateTime      @default(now())
  timeZone     String        @default("America/New_York")
  maxAttendees Int           @default(5)
  password     String?

  attendees        EventAttendee[]
  sessions         EventSession[]
  venues           EventVenue[]
  roles            EventRole[]
  sessionAttendees EventSessionAttendee[]
  sessionTypes     EventSessionType[]
  pages            EventPage[]

  @@map("event")
}

model EventAttendee {
  id             String              @id @default(cuid())
  userId         String
  eventId        String
  eventRoleId    String
  permissionRole EventPermissionRole

  role  EventRole @relation(fields: [eventRoleId], references: [id], onDelete: Cascade)
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  sessionAttendees EventSessionAttendee[]

  @@unique([eventId, userId])
  @@map("event_attendee")
}

model EventRole {
  id          String  @id @default(cuid())
  eventId     String
  slug        String
  name        String
  defaultRole Boolean @default(false)

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  attendees EventAttendee[]

  @@unique([eventId, slug])
  @@map("event_role")
}

model EventSession {
  id          String   @id @default(cuid())
  slug        String
  eventId     String
  startDate   DateTime
  endDate     DateTime
  venueId     String?
  typeId      String?
  name        String
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  event Event             @relation(fields: [eventId], references: [id], onDelete: Cascade)
  venue EventVenue?       @relation(fields: [venueId], references: [id], onDelete: Cascade)
  type  EventSessionType? @relation(fields: [typeId], references: [id], onDelete: Cascade)

  attendees EventSessionAttendee[]

  @@unique([eventId, slug])
  @@map("event_session")
}

model EventSessionType {
  id      String @id @default(cuid())
  eventId String
  slug    String
  name    String
  color   String

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  sessions EventSession[]

  @@unique([eventId, slug])
  @@map("event_session_type")
}

model EventSessionAttendee {
  id         String @id @default(cuid())
  sessionId  String
  attendeeId String
  eventId    String

  event    Event         @relation(fields: [eventId], references: [id], onDelete: Cascade)
  session  EventSession  @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  attendee EventAttendee @relation(fields: [attendeeId], references: [id], onDelete: Cascade)

  @@unique([eventId, sessionId, attendeeId])
  @@map("event_session_attendee")
}

model EventVenue {
  id          String   @id @default(cuid())
  slug        String
  eventId     String
  name        String
  address     String?
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  sessions EventSession[]

  @@unique([eventId, slug])
  @@map("event_venue")
}

model EventPage {
  id        String   @id @default(cuid())
  slug      String
  eventId   String
  name      String
  body      String?
  topLevel  Boolean  @default(false)
  updatedAt DateTime @updatedAt
  createdAt DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, slug])
  @@map("event_page")
}
