datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("account")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@map("session")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  company       String?
  position      String?
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
  role          Role      @default(USER)

  accounts    Account[]
  sessions    Session[]
  eventMember EventMember[]

  @@map("user")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum EventPermissionRole {
  FOUNDER
  ORGANIZER
  ATTENDEE
}

model Event {
  id          String   @id @default(cuid())
  name        String
  location    String
  address     String?
  startDate   DateTime
  endDate     DateTime
  type        String   @default("Event")
  image       String?  @default("https://www.gravatar.com/avatar/?d=identicon")
  banner      String?
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  eventMember   EventMember[]
  eventActivity EventActivity[]
  eventVenue    EventVenue[]
  eventRole     EventRole[]

  @@map("event")
}

model EventMember {
  id          String @id @default(cuid())
  userId      String
  eventId     String
  eventRoleId String

  permissionRole EventPermissionRole

  role  EventRole @relation(fields: [eventRoleId], references: [id])
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_member")
}

model EventRole {
  id      String @id @default(cuid())
  eventId String
  role    String @unique

  EventMember EventMember[]

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_role")
}

model EventActivity {
  id          String   @id @default(cuid())
  eventId     String
  startDate   DateTime
  endDate     DateTime
  venueId     String
  name        String
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  event Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  venue EventVenue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@map("event_activity")
}

model EventVenue {
  id          String   @id @default(cuid())
  eventId     String
  name        String
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@map("event_venue")
  EventActivity EventActivity[]
}
