datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  USER
  ADMIN
}


model User {
  id            String    @id @default(cuid())
  name          String?
  password    String
  email         String?   @unique
  emailVerified DateTime?
  image         String    @default("/images/default-avatar.jpg")
  updatedAt     DateTime  @updatedAt
  createdAt     DateTime  @default(now())
  role          Role      @default(USER)

  eventAttendee EventAttendee[]

  @@map("user")
}


enum EventPermissionRole {
  FOUNDER
  ORGANIZER
  ATTENDEE
}

model Event {
  id          String   @id @default(cuid())
  slug        String   @unique
  name        String
  location    String
  address     String?
  startDate   DateTime
  endDate     DateTime
  type        String   @default("Event")
  image       String  @default("/images/default-event.jpg")
  banner      String?
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  eventAttendee EventAttendee[]
  eventSession EventSession[]
  eventVenue    EventVenue[]
  eventRole     EventRole[]

  @@map("event")
}

model EventAttendee {
  id          String  @id @default(cuid())
  name        String
  slug        String
  userId      String
  eventId     String
  eventRoleId String
  location    String?
  description String?
  company     String?
  position    String?
  image           String @default("/images/default-avatar.jpg")

  permissionRole EventPermissionRole

  role  EventRole @relation(fields: [eventRoleId], references: [id])
  user  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event     @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, slug])
  @@map("event_attendee")
}

model EventRole {
  id          String  @id @default(cuid())
  eventId     String
  slug        String
  name        String
  defaultRole Boolean @default(false)

  EventAttendee EventAttendee[]

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, slug])
  @@map("event_role")
}

model EventSession {
  id          String   @id @default(cuid())
  slug        String
  eventId     String
  startDate   DateTime
  endDate     DateTime
  venueId     String
  name        String
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  event Event      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  venue EventVenue @relation(fields: [venueId], references: [id], onDelete: Cascade)

  @@unique([eventId, slug])
  @@map("event_session")
}

model EventVenue {
  id          String   @id @default(cuid())
  slug        String
  eventId     String
  name        String
  description String?
  updatedAt   DateTime @updatedAt
  createdAt   DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  EventSession EventSession[]

  @@unique([eventId, slug])
  @@map("event_venue")
}
